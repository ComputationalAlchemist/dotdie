=== Source Code ===
import stream stdout;
index = 3;
prev = 0;
import bit looping;
looping.bind(TRUE);
stdout.print(`. 2');
~ATH(looping) {
    cur = 2;
    import bit sublooping;
    sublooping.bind(TRUE);
    isprime = TRUE;
    ~ATH(sublooping) {
        isprime = isprime && (index % cur != 0);
        cur += 1;
        sublooping.bind(cur < index);
    } EXECUTE(sublooping.bind(isprime));
    ~ATH(sublooping) {
        stdout.print(` ');
        stdout.print(cur);
        sublooping.bind(FALSE);
    } EXECUTE(sublooping.bind(index / 100 != prev));
    ~ATH(sublooping) {
        stdout.println();
        stdout.print(`.');
        prev = index / 100;
        sublooping.bind(FALSE);
    } EXECUTE(NULL);
    index += 1;
    looping.bind(index < 150);
} EXECUTE(NULL);
stdout.println();

THIS.DIE();

=== Abstract Syntax Tree ===
COMPOUND
	IMPORT
		VARIABLE: stream
		VARIABLE: stdout
	ASSIGN
		VARIABLE: index
		CONST_INTEGER: 3
	ASSIGN
		VARIABLE: prev
		CONST_INTEGER: 0
	IMPORT
		VARIABLE: bit
		VARIABLE: looping
	EXPRESSION
		INVOKE
			FIELDREF
				VARIABLE: looping
				VARIABLE: bind
			TRUE
	EXPRESSION
		INVOKE
			FIELDREF
				VARIABLE: stdout
				VARIABLE: print
			CONST_STRING: . 2
	ATHLOOP
		VARIABLE: looping
		COMPOUND
			ASSIGN
				VARIABLE: cur
				CONST_INTEGER: 2
			IMPORT
				VARIABLE: bit
				VARIABLE: sublooping
			EXPRESSION
				INVOKE
					FIELDREF
						VARIABLE: sublooping
						VARIABLE: bind
					TRUE
			ASSIGN
				VARIABLE: isprime
				TRUE
			ATHLOOP
				VARIABLE: sublooping
				COMPOUND
					ASSIGN
						VARIABLE: isprime
						LAND
							VARIABLE: isprime
							CMPNE
								REMAINDER
									VARIABLE: index
									VARIABLE: cur
								CONST_INTEGER: 0
					ASSIGN
						VARIABLE: cur
						ADD
							VARIABLE: cur
							CONST_INTEGER: 1
					EXPRESSION
						INVOKE
							FIELDREF
								VARIABLE: sublooping
								VARIABLE: bind
							CMPLT
								VARIABLE: cur
								VARIABLE: index
				EXPRESSION
					INVOKE
						FIELDREF
							VARIABLE: sublooping
							VARIABLE: bind
						VARIABLE: isprime
			ATHLOOP
				VARIABLE: sublooping
				COMPOUND
					EXPRESSION
						INVOKE
							FIELDREF
								VARIABLE: stdout
								VARIABLE: print
							CONST_STRING:  
					EXPRESSION
						INVOKE
							FIELDREF
								VARIABLE: stdout
								VARIABLE: print
							VARIABLE: cur
					EXPRESSION
						INVOKE
							FIELDREF
								VARIABLE: sublooping
								VARIABLE: bind
							FALSE
				EXPRESSION
					INVOKE
						FIELDREF
							VARIABLE: sublooping
							VARIABLE: bind
						CMPNE
							DIVIDE
								VARIABLE: index
								CONST_INTEGER: 100
							VARIABLE: prev
			ATHLOOP
				VARIABLE: sublooping
				COMPOUND
					EXPRESSION
						INVOKE
							FIELDREF
								VARIABLE: stdout
								VARIABLE: println
					EXPRESSION
						INVOKE
							FIELDREF
								VARIABLE: stdout
								VARIABLE: print
							CONST_STRING: .
					ASSIGN
						VARIABLE: prev
						DIVIDE
							VARIABLE: index
							CONST_INTEGER: 100
					EXPRESSION
						INVOKE
							FIELDREF
								VARIABLE: sublooping
								VARIABLE: bind
							FALSE
				EXPRESSION
					NULL
			ASSIGN
				VARIABLE: index
				ADD
					VARIABLE: index
					CONST_INTEGER: 1
			EXPRESSION
				INVOKE
					FIELDREF
						VARIABLE: looping
						VARIABLE: bind
					CMPLT
						VARIABLE: index
						CONST_INTEGER: 150
		EXPRESSION
			NULL
	EXPRESSION
		INVOKE
			FIELDREF
				VARIABLE: stdout
				VARIABLE: println
	EXPRESSION
		INVOKE
			FIELDREF
				THIS
				VARIABLE: DIE
=== Compiled Bytecode ===
Procedure[0/13]: 106
src\prime.~ath:1
0	IMPORT stream/stdout -> 1
src\prime.~ath:2
1	CONST #3 -> 2
src\prime.~ath:3
2	CONST #0 -> 3
3	IMPORT bit/looping -> 4
src\prime.~ath:5
4	MOVE 4 -> 5
5	FIELD 5.bind
6	CONST true -> 6
7	INVOKE 5(6) -> 5
src\prime.~ath:6
8	MOVE 1 -> 5
9	FIELD 5.print
10	CONST `. 2' -> 6
11	INVOKE 5(6) -> 5
src\prime.~ath:7
12	MOVE 4 -> 5
13	ENTER 5 -> 100
src\prime.~ath:8
14	CONST #2 -> 6
15	IMPORT bit/sublooping -> 7
src\prime.~ath:10
16	MOVE 7 -> 8
17	FIELD 8.bind
18	CONST true -> 9
19	INVOKE 8(9) -> 8
src\prime.~ath:11
20	CONST true -> 8
src\prime.~ath:12
21	MOVE 7 -> 9
22	ENTER 9 -> 46
src\prime.~ath:13
23	MOVE 8 -> 10
24	MOVE 2 -> 11
25	MOVE 6 -> 12
26	MATH 12 REMAINDER -> 11
27	CONST #0 -> 12
28	MATH 12 CMPNE -> 11
29	MATH 11 LAND -> 10
30	MOVE 10 -> 8
src\prime.~ath:14
31	MOVE 6 -> 10
32	CONST #1 -> 11
33	MATH 11 ADD -> 10
34	MOVE 10 -> 6
src\prime.~ath:15
35	MOVE 7 -> 10
36	FIELD 10.bind
37	MOVE 6 -> 11
38	MOVE 2 -> 12
39	MATH 12 CMPLT -> 11
40	INVOKE 10(11) -> 10
41	EXIT 9 -> 23
src\prime.~ath:16
42	MOVE 7 -> 10
43	FIELD 10.bind
44	MOVE 8 -> 11
45	INVOKE 10(11) -> 10
src\prime.~ath:17
46	MOVE 7 -> 9
47	ENTER 9 -> 69
src\prime.~ath:18
48	MOVE 1 -> 10
49	FIELD 10.print
50	CONST ` ' -> 11
51	INVOKE 10(11) -> 10
src\prime.~ath:19
52	MOVE 1 -> 10
53	FIELD 10.print
54	MOVE 6 -> 11
55	INVOKE 10(11) -> 10
src\prime.~ath:20
56	MOVE 7 -> 10
57	FIELD 10.bind
58	CONST false -> 11
59	INVOKE 10(11) -> 10
60	EXIT 9 -> 48
src\prime.~ath:21
61	MOVE 7 -> 10
62	FIELD 10.bind
63	MOVE 2 -> 11
64	CONST #100 -> 12
65	MATH 12 DIVIDE -> 11
66	MOVE 3 -> 12
67	MATH 12 CMPNE -> 11
68	INVOKE 10(11) -> 10
src\prime.~ath:22
69	MOVE 7 -> 9
70	ENTER 9 -> 88
src\prime.~ath:23
71	MOVE 1 -> 10
72	FIELD 10.println
73	INVOKE 10() -> 10
src\prime.~ath:24
74	MOVE 1 -> 10
75	FIELD 10.print
76	CONST `.' -> 11
77	INVOKE 10(11) -> 10
src\prime.~ath:25
78	MOVE 2 -> 10
79	CONST #100 -> 11
80	MATH 11 DIVIDE -> 10
81	MOVE 10 -> 3
src\prime.~ath:26
82	MOVE 7 -> 10
83	FIELD 10.bind
84	CONST false -> 11
85	INVOKE 10(11) -> 10
86	EXIT 9 -> 71
src\prime.~ath:27
87	CONST NULL -> 10
src\prime.~ath:28
88	MOVE 2 -> 9
89	CONST #1 -> 10
90	MATH 10 ADD -> 9
91	MOVE 9 -> 2
src\prime.~ath:29
92	MOVE 4 -> 9
93	FIELD 9.bind
94	MOVE 2 -> 10
95	CONST #150 -> 11
96	MATH 11 CMPLT -> 10
97	INVOKE 9(10) -> 9
98	EXIT 5 -> 14
src\prime.~ath:30
99	CONST NULL -> 6
src\prime.~ath:31
100	MOVE 1 -> 5
101	FIELD 5.println
102	INVOKE 5() -> 5
src\prime.~ath:33
103	THIS -> 5
104	FIELD 5.DIE
105	INVOKE 5() -> 5
=== Execution ===
. 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101
. 103 107 109 113 127 131 137 139 149
=== Printout End ===
