=== Source Code ===
U~F ack(ack, m, n) {
    out = n + 1;
    import bit iloop;
    iloop.bind(m > 0 && n == 0);
    ~ATH(iloop) {
        out = ack(ack, m - 1, 1);
        iloop.bind(FALSE);
    } EXECUTE(NULL);
    iloop.bind(m > 0 && n > 0);
    ~ATH(iloop) {
        out = ack(ack, m - 1, ack(ack, m, n - 1));
        iloop.bind(FALSE);
    } EXECUTE(NULL);
    return out;
}
import stream stdout;
stdout.println(`Ackermann: ');
stdout.println(ack(ack, 3, 5));

THIS.DIE();

=== Abstract Syntax Tree ===
COMPOUND
	UTILDEF
		VARIABLE: @000000@ack
		ARGLIST
			VARIABLE: @000000@ack
			VARIABLE: @000000@m
			VARIABLE: @000000@n
		COMPOUND_RETURN
			ASSIGN
				VARIABLE: @000000@out
				ADD
					VARIABLE: @000000@n
					CONST_INTEGER: 1
			IMPORT
				VARIABLE: @000000@bit
				VARIABLE: @000000@iloop
			EXPRESSION
				INVOKE
					FIELDREF
						VARIABLE: @000000@iloop
						VARIABLE: @000000@bind
					LAND
						CMPGT
							VARIABLE: @000000@m
							CONST_INTEGER: 0
						CMPEQ
							VARIABLE: @000000@n
							CONST_INTEGER: 0
			ATHLOOP
				VARIABLE: @000000@iloop
				COMPOUND
					ASSIGN
						VARIABLE: @000000@out
						INVOKE
							VARIABLE: @000000@ack
							VARIABLE: @000000@ack
							SUBTRACT
								VARIABLE: @000000@m
								CONST_INTEGER: 1
							CONST_INTEGER: 1
					EXPRESSION
						INVOKE
							FIELDREF
								VARIABLE: @000000@iloop
								VARIABLE: @000000@bind
							FALSE
				EXPRESSION
					NULL
			EXPRESSION
				INVOKE
					FIELDREF
						VARIABLE: @000000@iloop
						VARIABLE: @000000@bind
					LAND
						CMPGT
							VARIABLE: @000000@m
							CONST_INTEGER: 0
						CMPGT
							VARIABLE: @000000@n
							CONST_INTEGER: 0
			ATHLOOP
				VARIABLE: @000000@iloop
				COMPOUND
					ASSIGN
						VARIABLE: @000000@out
						INVOKE
							VARIABLE: @000000@ack
							VARIABLE: @000000@ack
							SUBTRACT
								VARIABLE: @000000@m
								CONST_INTEGER: 1
							INVOKE
								VARIABLE: @000000@ack
								VARIABLE: @000000@ack
								VARIABLE: @000000@m
								SUBTRACT
									VARIABLE: @000000@n
									CONST_INTEGER: 1
					EXPRESSION
						INVOKE
							FIELDREF
								VARIABLE: @000000@iloop
								VARIABLE: @000000@bind
							FALSE
				EXPRESSION
					NULL
			RETURN
				VARIABLE: @000000@out
	IMPORT
		VARIABLE: @000000@stream
		VARIABLE: @000000@stdout
	EXPRESSION
		INVOKE
			FIELDREF
				VARIABLE: @000000@stdout
				VARIABLE: @000000@println
			CONST_STRING: Ackermann: 
	EXPRESSION
		INVOKE
			FIELDREF
				VARIABLE: @000000@stdout
				VARIABLE: @000000@println
			INVOKE
				VARIABLE: @000000@ack
				VARIABLE: @000000@ack
				CONST_INTEGER: 3
				CONST_INTEGER: 5
	EXPRESSION
		INVOKE
			FIELDREF
				THIS: @000000@
				VARIABLE: @000000@DIE
=== Compiled Bytecode ===
Procedure[0/8]: 17
src/skaianet/die/tests/ack.~ath:1
0	@000000@	CONST PROCEDURE -> 1
	Procedure[3/15]: 63
	src/skaianet/die/tests/ack.~ath:2
	0		@000000@	MOVE 3 -> 4
	1		@000000@	CONST class java.lang.Integer:1 -> 5
	2		@000000@	MATH 5 ADD -> 4
	3		@000000@	IMPORT @000000@bit/@000000@iloop -> 5
	src/skaianet/die/tests/ack.~ath:4
	4		@000000@	MOVE 5 -> 6
	5		@000000@	FIELD 6.@000000@bind
	6		@000000@	MOVE 2 -> 7
	7		@000000@	CONST class java.lang.Integer:0 -> 8
	8		@000000@	MATH 8 CMPGT -> 7
	9		@000000@	MOVE 3 -> 8
	10		@000000@	CONST class java.lang.Integer:0 -> 9
	11		@000000@	MATH 9 CMPEQ -> 8
	12		@000000@	MATH 8 LAND -> 7
	13		@000000@	INVOKE 6(7) -> 6
	src/skaianet/die/tests/ack.~ath:5
	14		@000000@	MOVE 5 -> 6
	15		@000000@	ENTER 6 -> 30
	src/skaianet/die/tests/ack.~ath:6
	16		@000000@	MOVE 1 -> 7
	17		@000000@	MOVE 1 -> 8
	18		@000000@	MOVE 2 -> 9
	19		@000000@	CONST class java.lang.Integer:1 -> 10
	20		@000000@	MATH 10 SUBTRACT -> 9
	21		@000000@	CONST class java.lang.Integer:1 -> 10
	22		@000000@	INVOKE 7(8, 9, 10) -> 7
	23		@000000@	MOVE 7 -> 4
	src/skaianet/die/tests/ack.~ath:7
	24		@000000@	MOVE 5 -> 7
	25		@000000@	FIELD 7.@000000@bind
	26		@000000@	CONST class java.lang.Boolean:false -> 8
	27		@000000@	INVOKE 7(8) -> 7
	28		@000000@	EXIT 6 -> 16
	src/skaianet/die/tests/ack.~ath:8
	29		@000000@	CONST NULL -> 7
	src/skaianet/die/tests/ack.~ath:9
	30		@000000@	MOVE 5 -> 6
	31		@000000@	FIELD 6.@000000@bind
	32		@000000@	MOVE 2 -> 7
	33		@000000@	CONST class java.lang.Integer:0 -> 8
	34		@000000@	MATH 8 CMPGT -> 7
	35		@000000@	MOVE 3 -> 8
	36		@000000@	CONST class java.lang.Integer:0 -> 9
	37		@000000@	MATH 9 CMPGT -> 8
	38		@000000@	MATH 8 LAND -> 7
	39		@000000@	INVOKE 6(7) -> 6
	src/skaianet/die/tests/ack.~ath:10
	40		@000000@	MOVE 5 -> 6
	41		@000000@	ENTER 6 -> 62
	src/skaianet/die/tests/ack.~ath:11
	42		@000000@	MOVE 1 -> 7
	43		@000000@	MOVE 1 -> 8
	44		@000000@	MOVE 2 -> 9
	45		@000000@	CONST class java.lang.Integer:1 -> 10
	46		@000000@	MATH 10 SUBTRACT -> 9
	47		@000000@	MOVE 1 -> 10
	48		@000000@	MOVE 1 -> 11
	49		@000000@	MOVE 2 -> 12
	50		@000000@	MOVE 3 -> 13
	51		@000000@	CONST class java.lang.Integer:1 -> 14
	52		@000000@	MATH 14 SUBTRACT -> 13
	53		@000000@	INVOKE 10(11, 12, 13) -> 10
	54		@000000@	INVOKE 7(8, 9, 10) -> 7
	55		@000000@	MOVE 7 -> 4
	src/skaianet/die/tests/ack.~ath:12
	56		@000000@	MOVE 5 -> 7
	57		@000000@	FIELD 7.@000000@bind
	58		@000000@	CONST class java.lang.Boolean:false -> 8
	59		@000000@	INVOKE 7(8) -> 7
	60		@000000@	EXIT 6 -> 42
	src/skaianet/die/tests/ack.~ath:13
	61		@000000@	CONST NULL -> 7
	src/skaianet/die/tests/ack.~ath:14
	62		@000000@	MOVE 4 -> 6
	Return: 6
src/skaianet/die/tests/ack.~ath:15
1	@000000@	IMPORT @000000@stream/@000000@stdout -> 2
src/skaianet/die/tests/ack.~ath:17
2	@000000@	MOVE 2 -> 3
3	@000000@	FIELD 3.@000000@println
4	@000000@	CONST class java.lang.String:Ackermann:  -> 4
5	@000000@	INVOKE 3(4) -> 3
src/skaianet/die/tests/ack.~ath:18
6	@000000@	MOVE 2 -> 3
7	@000000@	FIELD 3.@000000@println
8	@000000@	MOVE 1 -> 4
9	@000000@	MOVE 1 -> 5
10	@000000@	CONST class java.lang.Integer:3 -> 6
11	@000000@	CONST class java.lang.Integer:5 -> 7
12	@000000@	INVOKE 4(5, 6, 7) -> 4
13	@000000@	INVOKE 3(4) -> 3
src/skaianet/die/tests/ack.~ath:20
14	@000000@	THIS @000000@ -> 3
15	@000000@	FIELD 3.@000000@DIE
16	@000000@	INVOKE 3() -> 3
Return: null
=== Execution ===
Ackermann: 
253
=== Printout End ===
